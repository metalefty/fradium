#!/usr/bin/env ruby

require 'yaml'
require_relative '../lib/fradium'

def config_file_not_found
  print <<"EOD"
#{File.basename $0}: config file not found

Put ~/.fradium.yaml to define MySQL database to connect.
An Example of .fradium.yaml as follows.

-------------------------------------------------------------------------------

default: # default profile
  adapter: mysql2
  host: localhost
  username: root
  password: mysqlpassword
  database: radius

staging: # if you want to define another profile
  adapter: mysql2
  host: localhost
  username: root
  password: mysqlpassword
  database: radius_staging

-------------------------------------------------------------------------------
EOD
  exit
end

def show_help
  print <<"EOD"
usage:
  #{File.basename $0} [--profile=profile] subcommand ...

subcommands as follows:
  create <username> [expiry date]     # create new user with password
  show <username>                     # show password for username
  showall                             # show all users
  showvalid                           # show valid(not expired) users
  showexpired                         # show expired users
  showexpiry                          # show expiry inforrmation
  expire <username>                   # expire the user right now
  unexpire <username>                 # unexpire the user
  setexpire <username> <expiry date>  # set expiry date (date must be parseable by Time#parse)
  modify <username>                   # generate new password for username
  dbconsole                           # enter database console
  version                             # show version
EOD
  exit
end

def show_version
  puts "fradium v#{Fradium::VERSION}"
end

def show_user(username)
  user = @f.find_user(username).first
  printf "%s  %s\n", user[:username], user[:value]
end

# main routine starts here:
begin
  @config = YAML.load_file(ENV['HOME'] + '/.fradium.yaml')
rescue Errno::ENOENT, Errno::EACCESS
  config_file_not_found
end

profile = 'default'
if ARGV[0]&.start_with?('--profile')
  profile = ARGV[0].split(/=/,2)[1]
  ARGV.shift
end

@f = Fradium.new(@config[profile])

case ARGV[0]

when 'create'
  show_help if ARGV[1]&.empty?
  expiry_date = nil
  if ARGV.count >= 2 # when expiry given
    begin
      expiry_date = Time.parse(ARGV[2])
    rescue
      $stderr.puts "ERROR: could not parse expiry date"
      exit
    end
  else
  end
  @f.create_user(ARGV[1])
  @f.set_expiration(ARGV[1], expiry_date) if expiry_date
  show_user(ARGV[1])

when 'dbconsole'
  @f.dbconsole

when 'show'
  show_user(ARGV[1])

when 'showall'
  @f.all_users.map{|e| e[:username]}.each do |e|
    puts e
  end

when 'showvalid'
  (@f.all_users.map{|e| e[:username]} - @f.expired_users.map{|e| e[:username]}).each do |e|
    puts e
  end

when 'showexpired'
  @f.expired_users.map{|e| e[:username]}.each do |e|
    puts e
  end

when 'showexpiry'
  @f.expiry.each do |e|
    now = Time.now
    expiry = Time.parse(e[:value])

    print e[:username]
    print "\t"
    print expiry.iso8601
    print "\tEXPIRED" if now > expiry
    print "\n"
  end

when 'expire'
  @f.expire_user(ARGV[1])

when 'unexpire'
  @f.unexpire_user(ARGV[1])

when 'setexpire'
  show_help if ARGV[2].nil? || ARGV[2].empty?
  expiry_date = Time.parse(ARGV[2])
  @f.set_expiration(ARGV[1], expiry_date)

when 'modify' # change user password
  @f.modify_user(ARGV[1])
  show_user(ARGV[1])

when 'version'
  show_version

else # unknown subcommand
  show_help
end
